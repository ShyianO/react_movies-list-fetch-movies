{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","Title","Poster","imdbID","Plot","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","getMovie","title","a","fetch","response","ok","Error","status","text","json","FindMovie","onAddMovie","useState","value","setValue","setMovie","error","setError","loader","setLoader","htmlFor","type","id","placeholder","classnames","onChange","event","target","onClick","then","data","App","setMovies","find","item","ReactDOM","render","document","getElementById"],"mappings":"gvEAIaA,G,kBAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,OAAQC,EAAlB,EAAkBA,OAAQC,EAA1B,EAA0BA,KAA1B,OACvB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEC,IAAKJ,EACLK,IAAI,gBAIV,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBACEC,IAAI,wBACJC,IAAI,WAIV,yBAAKF,UAAU,iBACb,uBAAGA,UAAU,cAAcJ,KAI/B,yBAAKI,UAAU,WACZD,EACD,6BACA,uBAAGI,KAAI,qCAAgCL,IAAvC,aAaRH,EAAUS,aAAe,CACvBL,KAAM,ICxCD,IAAMM,EAAa,SAAC,GAAD,QAAGC,cAAH,MAAY,GAAZ,SACxB,yBAAKN,UAAU,UACZM,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,eAAWC,IAAKD,EAAMV,QAAYU,S,+CCP3BE,EAAQ,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sEACCC,MAAM,GAAD,OAHb,8CAGa,OAAeF,IADrB,WAChBG,EADgB,QAGRC,GAHQ,sBAId,IAAIC,MAAMF,EAASG,OAAQH,EAASI,MAJtB,gCAOfJ,EAASK,QAPM,2CAAH,sDCMRC,EAAY,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACjBC,mBAAS,IADQ,mBACpCC,EADoC,KAC7BC,EAD6B,OAEjBF,mBAAS,IAFQ,mBAEpCd,EAFoC,KAE7BiB,EAF6B,OAGjBH,oBAAS,GAHQ,mBAGpCI,EAHoC,KAG7BC,EAH6B,OAIfL,oBAAS,GAJM,mBAIpCM,EAJoC,KAI5BC,EAJ4B,KA4B3C,OACE,oCACE,0BAAM7B,UAAU,cACd,yBAAKA,UAAU,SACb,2BAAOA,UAAU,QAAQ8B,QAAQ,eAAjC,eAIA,yBAAK9B,UAAU,WACb,2BACE+B,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZjC,UAAWkC,IAAW,QAAS,CAAE,YAAaR,IAC9CH,MAAOA,EACPY,SArCS,SAACC,GACpBT,GAAS,GACTH,EAASY,EAAMC,OAAOd,WAuCfG,GACC,uBAAG1B,UAAU,kBAAb,yCAMJ,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,WACb,4BACE+B,KAAK,SACL/B,UACEkC,IAAW,SAAU,WAAY,CAAE,aAAcN,IAEnDU,QAlDS,WACnBT,GAAU,GAEVnB,EAASa,GAAOgB,MAAK,SAACC,GACpB,GAAIA,EAAKxB,MAKP,OAJAW,GAAS,GACTF,EAAS,WACTI,GAAU,GAKZJ,EAASe,GACTX,GAAU,QAgCJ,iBAWF,yBAAK7B,UAAU,WACb,4BACE+B,KAAK,SACL/B,UAAU,oBACVsC,QAAS,WACH9B,IACFa,EAAWb,GACXiB,EAAS,IACTD,EAAS,OAPf,sBAiBN,yBAAKxB,UAAU,aACb,wBAAIA,UAAU,SAAd,WACCQ,GAAU,kBAAC,EAAcA,M,OCxFrBiC,EAAM,WAAO,IAAD,EACKnB,mBAASkB,GADd,mBAChBlC,EADgB,KACRoC,EADQ,KAWvB,OACE,yBAAK1C,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAYM,OAAQA,KAEtB,yBAAKN,UAAU,WACb,kBAAC,EAAD,CAAWqB,WAdA,SAACb,GACZF,EAAOqC,MAAK,SAAAC,GAAI,OAAIA,EAAK9C,SAAWU,EAAMV,WAI9C4C,EAAU,GAAD,mBAAKpC,GAAL,CAAaE,WCV1BqC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.6d3b49b8.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({ Title, Poster, imdbID, Plot }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={Poster}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{Title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {Plot}\n        <br />\n        <a href={`https://www.imdb.com/title/${imdbID}`}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  Title: PropTypes.string.isRequired,\n  Poster: PropTypes.string.isRequired,\n  imdbID: PropTypes.string.isRequired,\n  Plot: PropTypes.string,\n};\n\nMovieCard.defaultProps = {\n  Plot: '',\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies = [] }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbID} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbID: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = 'http://www.omdbapi.com/?apikey=5ba996a5&t=';\n\nexport const getMovie = async(title) => {\n  const response = await fetch(`${BASE_URL}${title}`);\n\n  if (!response.ok) {\n    throw new Error(response.status, response.text);\n  }\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api/api';\n\nexport const FindMovie = ({ onAddMovie }) => {\n  const [value, setValue] = useState('');\n  const [movie, setMovie] = useState('');\n  const [error, setError] = useState(false);\n  const [loader, setLoader] = useState(false);\n\n  const handleChange = (event) => {\n    setError(false);\n    setValue(event.target.value);\n  };\n\n  const handleSearch = () => {\n    setLoader(true);\n\n    getMovie(value).then((data) => {\n      if (data.Error) {\n        setError(true);\n        setMovie(null);\n        setLoader(false);\n\n        return;\n      }\n\n      setMovie(data);\n      setLoader(false);\n    });\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classnames('input', { 'is-danger': error })}\n              value={value}\n              onChange={handleChange}\n            />\n          </div>\n\n          {error && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className={\n                classnames('button', 'is-light', { 'is-loading': loader })\n              }\n              onClick={handleSearch}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={() => {\n                if (movie) {\n                  onAddMovie(movie);\n                  setMovie('');\n                  setValue('');\n                }\n              }}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {movie && (<MovieCard {...movie} />)}\n      </div>\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  onAddMovie: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n\n  const addMovie = (movie) => {\n    if (movies.find(item => item.imdbID === movie.imdbID)) {\n      return;\n    }\n\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie onAddMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}